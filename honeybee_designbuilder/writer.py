# coding=utf-8
"""Methods to write Honeybee core objects to inp."""
from __future__ import division
import datetime
import xml.etree.ElementTree as ET

from honeybee.typing import clean_string

DESIGNBUILDER_VERSION = '2025.1.0.085'


def model_to_dsbxml_element(model, simulation_par=None):
    """Generate an DsbXML Element object for a Model.

    The resulting Element will include all geometry (Rooms, Faces, Apertures,
    Doors, Shades), all fully-detailed constructions + materials, all fully-detailed
    schedules, and the room properties. It will also include the simulation
    parameters. Essentially, the string includes everything needed to simulate
    the model.

    Args:
        model: A honeybee Model for which an DsbXML ElementTree object will be returned.
        simulation_par: A honeybee-energy SimulationParameter object to specify how the
            DesignBuilder simulation should be run. If None, default simulation
            parameters will be generated, which will run the simulation for the
            full year. (Default: None).
    """
    # duplicate model to avoid mutating it as we edit it for INP export
    original_model = model
    model = model.duplicate()
    # scale the model if the units are not feet
    if model.units != 'Meters':
        model.convert_to_units('Meters')
    # remove degenerate geometry within DesignBuilder native tolerance
    try:
        model.remove_degenerate_geometry(0.01)
    except ValueError:
        error = 'Failed to remove degenerate Rooms.\nYour Model units system is: {}. ' \
            'Is this correct?'.format(original_model.units)
        raise ValueError(error)

    # set up the ElementTree for the XML
    model_name = clean_string(model.display_name)
    base_template = \
        '<dsbXML name="~{}" date="{}" version = "{}" objects = "all">\n' \
        '</dsbXML>\n'.format(model_name, datetime.date.today(), DESIGNBUILDER_VERSION)
    xml_root = ET.fromstring(base_template)

    return xml_root


def model_to_dsbxml(model, simulation_par=None, program_name=None):
    """Generate an DsbXML string for a Model.

    The resulting string will include all geometry (Rooms, Faces, Apertures,
    Doors, Shades), all fully-detailed constructions + materials, all fully-detailed
    schedules, and the room properties. It will also include the simulation
    parameters. Essentially, the string includes everything needed to simulate
    the model.

    Args:
        model: A honeybee Model for which an DsbXML ElementTree object will be returned.
        simulation_par: A honeybee-energy SimulationParameter object to specify how the
            DesignBuilder simulation should be run. If None, default simulation
            parameters will be generated, which will run the simulation for the
            full year. (Default: None).
        program_name: Optional text to set the name of the software that will
            appear under a comment in the XML to identify where it is being exported
            from. This can be set things like "Ladybug Tools" or "Pollination"
            or some other software in which this DsbXML export capability is being
            run. If None, no comment will appear. (Default: None).

    Usage:

    .. code-block:: python

        import os
        from ladybug.futil import write_to_file
        from honeybee.model import Model
        from honeybee.room import Room
        from honeybee.config import folders

        # Crate an input Model
        room = Room.from_box('Tiny House Zone', 5, 10, 3)
        room.properties.energy.program_type = office_program
        room.properties.energy.add_default_ideal_air()
        model = Model('Tiny House', [room])

        # create the DsbXML ElementTree for the model
        xml_str = model.to.dsbxml(model)

        # write the final string into an XML file
        dsbxml = os.path.join(folders.default_simulation_folder, 'in_dsb.xml')
        write_to_file(dsbxml, xml_str, True)
    """
    # create the XML string
    xml_root = model_to_dsbxml_element(model, simulation_par)
    ET.indent(xml_root)
    dsbxml_str = ET.tostring(xml_root, encoding='unicode')

    # add the declaration and a comment about the authoring program
    prog_comment = ''
    if program_name is not None:
        prog_comment = '<!--File generated by {}-->\n'.format(program_name)
    base_template = \
        '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n{}'.format(prog_comment)
    dsbxml_str = base_template + dsbxml_str
    return dsbxml_str
